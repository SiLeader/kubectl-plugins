#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
import sys


__DESCRIPTION = '''
Execute a command in a container (label selector can use).

Examples:
  # Execute command in label selected Pod
  kubectl exec-label -l app.kubernetes.io/name=myapp -- /bin/ls

  # Execute command in Pod
  kubectl exec-label myapp -- /bin/ls

  # Switch to raw terminal mode; sends stdin to 'bash' in 'test' container
  # and sends stdout/stderr from 'bash' back to the client
  kubectl exec-label -l app.kubernetes.io/name=myapp -c test -i -t -- bash
'''


def main():
    parser = argparse.ArgumentParser(prog='kubectl exec-label',
                                     description=__DESCRIPTION, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-l', '--selector', help='Selector (label query) to filter Pods')
    parser.add_argument('-n', '--namespace', default='default', help='Namespace')
    parser.add_argument('-i', '--stdin', action='store_true', help='Pass stdin to the container')
    parser.add_argument('-t', '--tty', action='store_true', help='Stdin is a TTY')
    parser.add_argument('-c', '--container', help='Container name')
    parser.add_argument('-I', '--interactive', action='store_true', help='Interact if multiple Pods found')
    parser.add_argument('--debug', action='store_true', help='Show debug print')
    parser.add_argument('pod', help='Pod name (optional)', default=None)
    parser.add_argument('command', nargs=argparse.REMAINDER, help='Command line')

    args = parser.parse_args()

    if args.debug:
        def debug(*message):
            print('debug:', *message, file=sys.stderr)
    else:
        def debug(*_):
            pass

    kubectl = shutil.which('kubectl')
    debug(f'kubectl is "{kubectl}"')

    if args.pod is not None:
        if args.selector is not None:
            print('error: Both Pod name and label selector are specified.', file=sys.stderr)
            exit(4)
        selected_pod = args.pod
    else:
        proc = subprocess.run([
            kubectl, 'get', 'pod',
            '-n', args.namespace,
            '-l', args.selector,
            '--field-selector=status.phase=Running',
            '-o', 'jsonpath={.items[*].metadata.name}'
        ], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        stdout = proc.stdout.decode(encoding='utf-8')
        names = [spl.strip() for spl in stdout.split(' ')]
        debug('found pods:', names)
        if len(names) == 0:
            print(f'error: No Pods found in {args.namespace} namespace.', file=sys.stderr)
            exit(1)

        if len(names) > 1:
            if not args.interactive:
                print(f'error: Multiple Pods found in {args.namespace} namespace.', file=sys.stderr)
                print('pods:', file=sys.stderr)
                for name in names:
                    print(f'  - {name}', file=sys.stderr)
                exit(2)

            print('warning: Multiple Pods found. please select a pod number')
            print('pod:', file=sys.stderr)
            for i, name in enumerate(names):
                print(f'  {i}: {name}', file=sys.stderr)
            number = input('number: ')
            number = int(number)
            if number >= len(names):
                print('error: invalid pod number is selected.', file=sys.stderr)
                exit(3)
            selected_pod = names[number]
            print('selected:', selected_pod, file=sys.stderr)
        else:
            selected_pod = names[0]
    debug('selected pod is', selected_pod)

    exec_args = [kubectl, 'exec', '-n', args.namespace, selected_pod]
    if args.stdin:
        exec_args.append('-i')
    if args.tty:
        exec_args.append('-t')
    if args.container is not None:
        exec_args.extend(['-c', args.container])

    if len(args.command) == 0:
        print('error: No command is passed', file=sys.stderr)
        exit(5)
    if args.command[0] != '--':
        exec_args.append('--')
    exec_args.extend(args.command)

    debug('exec args:', exec_args)
    os.execl(kubectl, *exec_args)


if __name__ == '__main__':
    main()
